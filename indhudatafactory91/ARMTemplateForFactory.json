{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "indhudatafactory91"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"Oracle_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'Oracle'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://indhustorage2.dfs.core.windows.net/"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "indhuserver1.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "AzureSQLdb"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "Indhu"
		},
		"ls_kv_dev_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://kv-mypwd-dev.vault.azure.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/copy_src_tgt_delete_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Delete1",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "src_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"logStorageSettings": {
								"linkedServiceName": {
									"referenceName": "AzureDataLakeStorage1",
									"type": "LinkedServiceReference"
								},
								"path": "data/source"
							},
							"enableLogging": true,
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T02:23:18Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_data')]",
				"[concat(variables('factoryId'), '/datasets/tgt_data')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_src_tgt_wait_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T03:01:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_data')]",
				"[concat(variables('factoryId'), '/datasets/tgt_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/copy_wildcard')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_wildcard",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "source/src_param",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "targetdataset",
								"type": "DatasetReference",
								"parameters": {
									"parameter_dataset": {
										"value": "@concat(concat(pipeline().parameters.parameter_file1,utcNow()),'.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"parameter_file1": {
						"type": "string"
					}
				},
				"variables": {
					"parameter_file1": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T03:01:11Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source_dataset')]",
				"[concat(variables('factoryId'), '/datasets/targetdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/execute_multiple_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Execute Pipeline1",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_src_tgt_wait_activity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Execute Pipeline2",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Wait1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "copy_src_tgt_delete_activity",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Execute Pipeline1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-08T03:01:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copy_src_tgt_wait_activity')]",
				"[concat(variables('factoryId'), '/pipelines/copy_src_tgt_delete_activity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ORACLE_TEST')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.employees where salary >20000",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_data",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-22T17:43:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/tgt_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/p_ORACLE_srcemp_tgtemp')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.employees where salary >20000",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"sink": {
								"type": "OracleSink",
								"writeBatchSize": 10000
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OracleTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "OracleTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-23T03:10:48Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/OracleTable1')]",
				"[concat(variables('factoryId'), '/datasets/OracleTable2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ALTERROW_AzuresqlDB')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_alterrow_azuresqlDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-21T02:43:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_alterrow_azuresqlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_CHANNEL_REF_SCD1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CHANNEL_REF_scd1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-14T05:26:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CHANNEL_REF_scd1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_CONTROL_TABLE_MULTITABLE_LOAD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "FETCH METADATA CONTROL_TABLE",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "SELECT * FROM metadata.control_table_learnIT WHERE IS_aCT_IND='Y' and source_system=@{pipeline().parameters.p_SOURCE_SYSTEM}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "ds_azure_control_table",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Traverse_control_values",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "FETCH METADATA CONTROL_TABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('FETCH METADATA CONTROL_TABLE').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "ADLS_to_target",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "source to adls",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_adsl",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.p_container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.p_directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable1",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "source to adls",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"partitionOption": "None",
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_OracleTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_adsl",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.p_container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.p_directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "ADLS_STAGE_to_ ARCHIEVE",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "ADLS_to_target",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "ds_adsl",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.p_container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.p_directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'.csv')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "ds_archival",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.p_container",
													"type": "Expression"
												},
												"archival_directory": {
													"value": "@pipeline().parameters.p_archive_directory",
													"type": "Expression"
												},
												"filename": {
													"value": "@concat(item().SOURCE_TABLE,'_',utcNow(),'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Delete_30days_file",
									"type": "Delete",
									"dependsOn": [
										{
											"activity": "ADLS_STAGE_to_ ARCHIEVE",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "ds_adsl",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.p_container",
													"type": "Expression"
												},
												"directory": {
													"value": "@pipeline().parameters.p_archive_directory",
													"type": "Expression"
												},
												"filename": {
													"value": " ",
													"type": "Expression"
												}
											}
										},
										"logStorageSettings": {
											"linkedServiceName": {
												"referenceName": "AzureDataLakeStorage1",
												"type": "LinkedServiceReference"
											},
											"path": "data/parameter_output"
										},
										"enableLogging": true,
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"modifiedDatetimeStart": null,
											"modifiedDatetimeEnd": {
												"value": "@adddays(utcNow(),-30 )",
												"type": "Expression"
											},
											"wildcardFileName": "*.csv.gz",
											"enablePartitionDiscovery": false
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_source_system": {
						"type": "string",
						"defaultValue": "'SQL_SERVER'"
					},
					"p_container": {
						"type": "string",
						"defaultValue": "adftraining"
					},
					"p_directory": {
						"type": "string",
						"defaultValue": "STAGE"
					},
					"p_archive_directory": {
						"type": "string",
						"defaultValue": "archive"
					}
				},
				"folder": {
					"name": "ADF_TRAINING_NEW"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_azure_control_table')]",
				"[concat(variables('factoryId'), '/datasets/ds_adsl')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]",
				"[concat(variables('factoryId'), '/datasets/SRC_OracleTable')]",
				"[concat(variables('factoryId'), '/datasets/ds_archival')]",
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_DATAFLOW')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Data flow2",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow2",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Data flowjoins",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_EMP",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flowjoins",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Data flow_aggregate",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_joins",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Data flow_aggregate",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_EMP_agg_logic",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-13T02:14:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_EMP')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_joins')]",
				"[concat(variables('factoryId'), '/dataflows/dataflow_EMP_agg_logic')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_DELIVERY_TYPE_REF_scd1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_DELIVERY_TYPE_REF_scd1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-14T05:23:57Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_DELIVERY_TYPE_REF_scd1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_GetMetadata_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greater(activity('Get Metadata1').output.size,10)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Message",
										"value": "'Load run is skipped'"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy activity",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_data",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "target_switch",
											"type": "DatasetReference",
											"parameters": {
												"switch1": "default"
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "src_data",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"size"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Runload": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"Message": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T01:51:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_data')]",
				"[concat(variables('factoryId'), '/datasets/target_switch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_LOCATION_DIM_SCD')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_LOCATIONS_DIM_SCD2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"srclocationdim": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-14T05:25:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_LOCATIONS_DIM_SCD2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_PAYMENT_REF_scd1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PAYMENT_REF_scd1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-14T02:51:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PAYMENT_REF_scd1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_PRODUCT_TOPPINGS_DIM_scd2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PRODUCT_TOPPINGS_DIM_scd2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-17T03:20:37Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PRODUCT_TOPPINGS_DIM_scd2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_PROMOTION_SCD3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_PROMOTION_DIM_SCD3",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGPROMOTIONS": {},
									"PROMOTIONDIM": {},
									"INSERT": {},
									"UPDATE": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-10T01:36:35Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_PROMOTION_DIM_SCD3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_SALES_FACT')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_fact",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"order": {},
									"OrderLines": {},
									"customer": {},
									"locationdim": {},
									"productdim": {},
									"ProductTopping": {},
									"promotions": {},
									"payment": {},
									"channel": {},
									"DeliveryType": {},
									"date": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-19T02:28:09Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_fact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_append_variable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "array_var1",
							"value": {
								"value": "@variables('array_var')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Append variable1",
						"type": "AppendVariable",
						"dependsOn": [
							{
								"activity": "Set variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "array_var",
							"value": {
								"value": "@int(5)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable2",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Append variable1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "array_var1",
							"value": {
								"value": "@variables('array_var')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"array_var": {
						"type": "Array",
						"defaultValue": [
							1,
							2,
							3,
							4
						]
					},
					"array_var1": {
						"type": "Array"
					},
					"var_3": {
						"type": "Integer"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-09T02:53:30Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_comditional_split')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_conditional_split",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-09T03:10:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_conditional_split')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_crossjoin')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow_crossjoin",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-14T02:20:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow_crossjoin')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SRC_OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"sourcetable": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"tgtfiles": {
													"value": "@item().tarettable",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-05T17:41:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_OracleTable')]",
				"[concat(variables('factoryId'), '/datasets/SRC_DataLoad')]",
				"[concat(variables('factoryId'), '/datasets/tgt_DataLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataload_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config where activeflag = 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SRC_OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"sourcetable": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"tgtfiles": {
													"value": "@item().tarettable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Oracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.config set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-05T17:54:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_OracleTable')]",
				"[concat(variables('factoryId'), '/datasets/SRC_DataLoad')]",
				"[concat(variables('factoryId'), '/datasets/tgt_DataLoad')]",
				"[concat(variables('factoryId'), '/linkedServices/Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataload_2_config')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config where activeflag = 2",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SRC_OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"batchCount": 5,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"sourcetable": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"tgtfiles": {
													"value": "@item().tarettable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@utcNow()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Oracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat(\n'update hr.config set startdate = ''', variables('StartDate'),\n''', enddate = ''', utcNow(),\n''', status = ''success'',\nsource = ', activity('Copy data1').output.rowsRead, ' ,\ntarget = ', activity('Copy data1').output.rowsCopied,' \nwhere sourcetable = ''', item().sourcetable, ''''\n)\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-27T02:42:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_OracleTable')]",
				"[concat(variables('factoryId'), '/datasets/SRC_DataLoad')]",
				"[concat(variables('factoryId'), '/datasets/tgt_DataLoad')]",
				"[concat(variables('factoryId'), '/linkedServices/Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dataload_failure')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "OracleSource",
								"oracleReaderQuery": "select * from hr.config where activeflag = 1",
								"partitionOption": "None",
								"queryTimeout": "02:00:00"
							},
							"dataset": {
								"referenceName": "SRC_OracleTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Script3",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "OracleSource",
											"oracleReaderQuery": {
												"value": "@item().query",
												"type": "Expression"
											},
											"partitionOption": "None",
											"convertDecimalToInteger": false,
											"queryTimeout": "02:00:00"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "SRC_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"sourcetable": {
													"value": "@item().sourcetable",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_DataLoad",
											"type": "DatasetReference",
											"parameters": {
												"tgtfiles": {
													"value": "@item().tarettable",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "StartDate",
										"value": {
											"value": "@int(utcNow())",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Script1",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "Oracle",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('update hr.config set startdate =  ''',variables('StartDate'),''' ,enddate = ''',utcNow(),''' ,status = ''success'' where sourcetable = ''',item().sourcetable,'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "Script2",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "Oracle",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('update hr.config set status =''failed ''', 'where activeflag = 1 and status is null')",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Script3",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "Oracle",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "update  hr.config set status = null where activeflag =1"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"StartDate": {
						"type": "String"
					},
					"sourcetable": {
						"type": "String"
					},
					"dummy": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-05T17:54:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SRC_OracleTable')]",
				"[concat(variables('factoryId'), '/linkedServices/Oracle')]",
				"[concat(variables('factoryId'), '/datasets/SRC_DataLoad')]",
				"[concat(variables('factoryId'), '/datasets/tgt_DataLoad')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_delete')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_alterrow_azuresqlDB",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-22T02:52:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_alterrow_azuresqlDB')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_fact_member_loyality_program')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_member_loyality_fact",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"memberloyality": {},
									"customer": {},
									"storelocation": {},
									"date": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-20T02:42:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_member_loyality_fact')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_if_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "If Condition1",
						"type": "IfCondition",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(pipeline().parameters.Runload,1)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "Message",
										"value": "'Load run is skipped'"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Copy activity",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_data",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "target_switch",
											"type": "DatasetReference",
											"parameters": {
												"switch1": "default"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"Runload": {
						"type": "int",
						"defaultValue": 1
					}
				},
				"variables": {
					"Message": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T01:57:34Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_data')]",
				"[concat(variables('factoryId'), '/datasets/target_switch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lkp_for_each_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "lkp_dept",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup1').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"batchCount": 2,
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_lkp_dataset",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "tgt_foreach",
											"type": "DatasetReference",
											"parameters": {
												"folder_name": {
													"value": "@item().dept_name",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-10T02:58:30Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lkp_dept')]",
				"[concat(variables('factoryId'), '/datasets/src_lkp_dataset')]",
				"[concat(variables('factoryId'), '/datasets/tgt_foreach')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup1",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "lkp_src",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Lookup1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "filename",
										"value": "$$FILENAME"
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tgt_dataset_lookup",
								"type": "DatasetReference",
								"parameters": {
									"filename": {
										"value": "@activity('Lookup1').output.firstRow.name",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T01:51:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/lkp_src')]",
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/tgt_dataset_lookup')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_pivot')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_pivot",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-22T03:12:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_pivot')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_product_dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_product_stg",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"stgproduct": {},
									"category": {},
									"subcat": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-05T01:29:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_product_stg')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_product_dim_scd2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_Product_Dim_scd2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"SrcProduct": {},
									"ProductDimSCD": {},
									"Insertsink": {},
									"Updatesink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-06T03:57:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_Product_Dim_scd2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_project_customer_dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_CUSTOMER_STG",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"STGCUSTOMERS": {},
									"CUSTOMERADDRESS": {},
									"CUSTEMAIL": {},
									"CUSTPHONE": {},
									"HUTLOVER": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-14T05:26:54Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_CUSTOMER_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_project_location_dim')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_STORE_LOCATION_STG",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-12-03T02:44:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_STORE_LOCATION_STG')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_switch_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Switch1",
						"type": "Switch",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"on": {
								"value": "@pipeline().parameters.para_switch",
								"type": "Expression"
							},
							"cases": [
								{
									"value": "output1",
									"activities": [
										{
											"name": "Copy data1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "src_data",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "target_switch",
													"type": "DatasetReference",
													"parameters": {
														"switch1": {
															"value": "@pipeline().parameters.para_switch",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								},
								{
									"value": "output2",
									"activities": [
										{
											"name": "Copy data1_copy1",
											"type": "Copy",
											"dependsOn": [],
											"policy": {
												"timeout": "0.12:00:00",
												"retry": 0,
												"retryIntervalInSeconds": 30,
												"secureOutput": false,
												"secureInput": false
											},
											"userProperties": [],
											"typeProperties": {
												"source": {
													"type": "DelimitedTextSource",
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"enablePartitionDiscovery": false
													},
													"formatSettings": {
														"type": "DelimitedTextReadSettings"
													}
												},
												"sink": {
													"type": "DelimitedTextSink",
													"storeSettings": {
														"type": "AzureBlobFSWriteSettings"
													},
													"formatSettings": {
														"type": "DelimitedTextWriteSettings",
														"quoteAllText": true,
														"fileExtension": ".txt"
													}
												},
												"enableStaging": false,
												"translator": {
													"type": "TabularTranslator",
													"typeConversion": true,
													"typeConversionSettings": {
														"allowDataTruncation": true,
														"treatBooleanAsNumber": false
													}
												}
											},
											"inputs": [
												{
													"referenceName": "src_data",
													"type": "DatasetReference",
													"parameters": {}
												}
											],
											"outputs": [
												{
													"referenceName": "target_switch",
													"type": "DatasetReference",
													"parameters": {
														"switch1": {
															"value": "@pipeline().parameters.para_switch",
															"type": "Expression"
														}
													}
												}
											]
										}
									]
								}
							],
							"defaultActivities": [
								{
									"name": "Copy data1_copy2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "src_data",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "target_switch",
											"type": "DatasetReference",
											"parameters": {
												"switch1": "default"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"para_switch": {
						"type": "string"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-25T02:25:20Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_data')]",
				"[concat(variables('factoryId'), '/datasets/target_switch')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_until')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Until1",
						"type": "Until",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@greaterOrEquals(int(variables('var')),3 )",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "temp",
										"value": {
											"value": "@variables('var')",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable2",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "var",
										"value": {
											"value": "@string(add(int(variables('temp')),1))",
											"type": "Expression"
										}
									}
								}
							],
							"timeout": "0.12:00:00"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"var": {
						"type": "String",
						"defaultValue": "1"
					},
					"temp": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-26T02:36:48Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_window_functions')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow_wiondowfunction",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "df_window_functions",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2024-11-15T02:34:52Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/df_window_functions')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy_wildcard",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFolderPath": "source/src_param",
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "MergeFiles"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "source_dataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "targetdataset",
								"type": "DatasetReference",
								"parameters": {
									"parameter_dataset": {
										"value": "@concat(concat(pipeline().parameters.parameter_file1,utcNow()),'.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"parameter_file1": {
						"type": "string"
					}
				},
				"variables": {
					"parameter_file1": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2024-10-03T02:43:25Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/source_dataset')]",
				"[concat(variables('factoryId'), '/datasets/targetdataset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "learnit_batch9_employee_tgt"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTableDELIVERY_TYPE_REF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Delivery_Type_Ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Delivery_Type_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Delivery_Type",
						"type": "varchar"
					},
					{
						"name": "STG_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "DELIVERY_TYPE_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablePAYMENT_REF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Payment_Ref_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Payment_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Payment_Type",
						"type": "varchar"
					},
					{
						"name": "STG_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "PAYMENT_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_PRODUCT_TOPPINGS_DIM')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Product_Topping_Dim_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Topping_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Topping_Name",
						"type": "varchar"
					},
					{
						"name": "Topping_Price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "Is_Active",
						"type": "varchar"
					},
					{
						"name": "Effective_Date",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "Flag",
						"type": "varchar"
					},
					{
						"name": "DM_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "PRODUCT_TOPPINGS_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_PROMOTION_SCD3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "PROMOTION_DIM_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Promotion_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Promotion_Name",
						"type": "varchar"
					},
					{
						"name": "previous_Promotion_Name",
						"type": "varchar"
					},
					{
						"name": "Promotion_Type",
						"type": "varchar"
					},
					{
						"name": "previous_Promotion_Type",
						"type": "varchar"
					},
					{
						"name": "Discount_amount",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "previous_Discount_amount",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "START_DATE",
						"type": "date"
					},
					{
						"name": "Previous_START_DATE",
						"type": "date"
					},
					{
						"name": "END_DATE",
						"type": "date"
					},
					{
						"name": "previous_END_DATE",
						"type": "date"
					},
					{
						"name": "stg_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "PROMOTION_DIM"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_SALES_FACT')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Order_Line_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Order_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_DIM_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Payment_Ref_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "channel_ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Delivery_Type_Ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Topping_Dim_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Location_Dim_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "product_dim_kEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "PROMOTION_DIM_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Order_Date",
						"type": "date"
					},
					{
						"name": "Order_Status",
						"type": "varchar"
					},
					{
						"name": "Quantity",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "Unit_price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "Topping_Price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "Promotion_Amount",
						"type": "decimal",
						"precision": 5,
						"scale": 3
					},
					{
						"name": "DM_create_date",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "SALES_FACT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_fact_member_loyality_program')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "member_loyality_program_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "order_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Member_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CUSTOMER_DIM_KEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Location_Dim_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Date_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Total_Points_Earned",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Remaining_points",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Is_Active",
						"type": "varchar"
					},
					{
						"name": "DM_create_date",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "fact_member_loyality_program"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTable_location_dim_scd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Loc_Dim_Key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Store_Location_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Store_Name",
						"type": "varchar"
					},
					{
						"name": "Store_Address",
						"type": "varchar"
					},
					{
						"name": "Store_Open_Time",
						"type": "varchar"
					},
					{
						"name": "Store_Close_Time",
						"type": "varchar"
					},
					{
						"name": "State_Name",
						"type": "varchar"
					},
					{
						"name": "FLAG",
						"type": "varchar"
					},
					{
						"name": "DM_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "LOCATION_DIM_SCD"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlTablechannelref')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Channel_ref_key",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Channel_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Channel_Type",
						"type": "varchar"
					},
					{
						"name": "STG_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "CHANNEL_REF"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_ADDRESS",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DelimitedText2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Name",
						"type": "String"
					},
					{
						"name": "Category",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Error",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "EMPLOYEES"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OracleTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "EMP_TEST"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_DataLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"sourcetable": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": {
						"value": "@dataset().sourcetable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SRC_OracleTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {
					"schema": "HR",
					"table": "DEPARTMENTS"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cust_address')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_ADDRESS",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ADDRESS_ID",
						"type": "String"
					},
					{
						"name": "ADDRESS_LANE1",
						"type": "String"
					},
					{
						"name": "ADDRESS_LANE_2",
						"type": "String"
					},
					{
						"name": "CITY_NAME",
						"type": "String"
					},
					{
						"name": "STATE_NAME",
						"type": "String"
					},
					{
						"name": "COUNTRY_NAME",
						"type": "String"
					},
					{
						"name": "ZIP_CODE",
						"type": "String"
					},
					{
						"name": "GATE_CODE",
						"type": "String"
					},
					{
						"name": "ADDRESS_TYPE",
						"type": "String"
					},
					{
						"name": "ADDRESS_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/cust_hutlover')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_HUT_LOVER",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "HUT_LOVERS_ID",
						"type": "String"
					},
					{
						"name": "JOINING_DATE",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					},
					{
						"name": "MEMBER_ID",
						"type": "String"
					},
					{
						"name": "CUSTMOER_ID",
						"type": "String"
					},
					{
						"name": "CREATE_USER_ID",
						"type": "String"
					},
					{
						"name": "CREATE_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMERS",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_FIRST_NAME",
						"type": "String"
					},
					{
						"name": "CUSTOMER_LAST_NAME",
						"type": "String"
					},
					{
						"name": "CUSTOMER_DOB",
						"type": "String"
					},
					{
						"name": "CUSTOMER_TYPE",
						"type": "String"
					},
					{
						"name": "IS_LOYAL",
						"type": "String"
					},
					{
						"name": "FIRST_PURCHASE_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "customer_dim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_email')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_EMAIL",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_EMAIL_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL_TYPE",
						"type": "String"
					},
					{
						"name": "CUSTOMER_EMAIL_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_phno')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CUSTOMER_PHONENUMBER",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CUSTOMER_PHONE_NUMBER_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_TYPE",
						"type": "String"
					},
					{
						"name": "CUSTOMER_PHONE_STATUS",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/customer_scd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "customer_scd.csv",
						"folderPath": "target/AzureProject/Dim",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/departments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "departments.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dept_lkp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept_lookup.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dept_id",
						"type": "String"
					},
					{
						"name": "dept_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dept_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "departments",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_NAME",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "LOCATION_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_DELIVERY_TYPE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_DELIVERY_METHOD",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DELIVERY_ID",
						"type": "String"
					},
					{
						"name": "DELIVERY_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_adsl')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"compressionCodec": null,
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_archival')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"archival_directory": {
						"type": "string"
					},
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().archival_directory",
							"type": "Expression"
						},
						"fileSystem": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_azure_control_table')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "SOURCE_SYSTEM",
						"type": "varchar"
					},
					{
						"name": "SOURCE_SCHEMA",
						"type": "varchar"
					},
					{
						"name": "SOURCE_TABLE",
						"type": "varchar"
					},
					{
						"name": "LOAD_TYPE",
						"type": "varchar"
					},
					{
						"name": "IS_ACT_IND",
						"type": "varchar"
					},
					{
						"name": "TARGET_SCHEMA",
						"type": "varchar"
					},
					{
						"name": "TARGET_TABLE",
						"type": "varchar"
					},
					{
						"name": "QUERY_DETAILS",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "metadata",
					"table": "control_table_learnIT"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_channel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_CHANNEL",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "CHANNEL_ID",
						"type": "String"
					},
					{
						"name": "CHANNEL_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_date')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "DATE_DATA",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "DATE_KEY",
						"type": "String"
					},
					{
						"name": "DAY_YYYY_MM_DD",
						"type": "String"
					},
					{
						"name": "DAY_US_MM_DD_YYYY",
						"type": "String"
					},
					{
						"name": "DAY_US_LONG",
						"type": "String"
					},
					{
						"name": "DAY_US_M_D_YY",
						"type": "String"
					},
					{
						"name": "WEEK_SHORT",
						"type": "String"
					},
					{
						"name": "WEEK_NUMBER",
						"type": "String"
					},
					{
						"name": "WEEK_LONG",
						"type": "String"
					},
					{
						"name": "MONTH_IN_QUARTER_NUMBER",
						"type": "String"
					},
					{
						"name": "MONTH_IN_YEAR_SHORT",
						"type": "String"
					},
					{
						"name": "MONTH_IN_YEAR_LONG",
						"type": "String"
					},
					{
						"name": "WEEK_WK_QTR_YEAR",
						"type": "String"
					},
					{
						"name": "WEEK_FROM_TO",
						"type": "String"
					},
					{
						"name": "WEEK_STARTING",
						"type": "String"
					},
					{
						"name": "WEEK_WK_YEAR_CONT",
						"type": "String"
					},
					{
						"name": "WEEK_WK_YEAR",
						"type": "String"
					},
					{
						"name": "WEEK_WK_QTR_YEAR_CONT",
						"type": "String"
					},
					{
						"name": "DAY_IN_WEEK_SHORT",
						"type": "String"
					},
					{
						"name": "DAY_IN_WEEK_NUMBER",
						"type": "String"
					},
					{
						"name": "DAY_IN_WEEK_LONG",
						"type": "String"
					},
					{
						"name": "MONTH_SHORT",
						"type": "String"
					},
					{
						"name": "MONTH_NUMBER",
						"type": "String"
					},
					{
						"name": "MONTH_LONG",
						"type": "String"
					},
					{
						"name": "QUARTER_SHORT_US",
						"type": "String"
					},
					{
						"name": "YEAR",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_member_loyality')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_MEMBER_LOYALTY",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "MEMBER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_DATE",
						"type": "String"
					},
					{
						"name": "INITIAL_POINTS_RECEIVED_DATE",
						"type": "String"
					},
					{
						"name": "INITIAL_REWARD_POINTS",
						"type": "String"
					},
					{
						"name": "LAST_EARNED_POINTS",
						"type": "String"
					},
					{
						"name": "TOTAL_POINTS_EARNED",
						"type": "String"
					},
					{
						"name": "REMAINING_POINTS",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					},
					{
						"name": "STORE_LOCATION_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_order_line')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_ORDER_LINES",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ORDER_LINE_ID",
						"type": "String"
					},
					{
						"name": "UNIT_PRICE",
						"type": "String"
					},
					{
						"name": "QUANTITY",
						"type": "String"
					},
					{
						"name": "PROMOTION_AMOUNT",
						"type": "String"
					},
					{
						"name": "PROMOTION_ID",
						"type": "String"
					},
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_payment_ref')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PAYMENT_METHOD",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PAYMENT_ID",
						"type": "String"
					},
					{
						"name": "PAYMENT_TYPE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_product')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_PRICE",
						"type": "String"
					},
					{
						"name": "PRODUCT_DESCRIPTION",
						"type": "String"
					},
					{
						"name": "CALORIES",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					},
					{
						"name": "PRODUCT_SUBCATEGORY_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_product_toppings')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_TOPPINGS",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_TOPPING_ID",
						"type": "String"
					},
					{
						"name": "TOPPING_NAME",
						"type": "String"
					},
					{
						"name": "TOPING_PRICE",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_promotions_stg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PROMOTIONS",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PROMOTION_ID",
						"type": "String"
					},
					{
						"name": "PROMOTION_NAME",
						"type": "String"
					},
					{
						"name": "PROMOTION_TYPE",
						"type": "String"
					},
					{
						"name": "DISCOUNT_AMOUNT",
						"type": "String"
					},
					{
						"name": "START_DATE",
						"type": "String"
					},
					{
						"name": "END_DATE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_state_country')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_STATE_COUNTRY",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "STATE_COUNTRY_ID",
						"type": "String"
					},
					{
						"name": "STATE_NAME",
						"type": "String"
					},
					{
						"name": "STATE_ABBREVATION",
						"type": "String"
					},
					{
						"name": "STATE_COUNTRY",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_stg_order_line')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_ORDER",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "ORDER_ID",
						"type": "String"
					},
					{
						"name": "ORDER_DATE",
						"type": "String"
					},
					{
						"name": "ORDER_STATUS",
						"type": "String"
					},
					{
						"name": "TOTAL_AMOUNT",
						"type": "String"
					},
					{
						"name": "TOTAL_TAX",
						"type": "String"
					},
					{
						"name": "TIPS",
						"type": "String"
					},
					{
						"name": "TOTAL_QUANTITY",
						"type": "String"
					},
					{
						"name": "DELIVERY_ID",
						"type": "String"
					},
					{
						"name": "CHANNEL_ID",
						"type": "String"
					},
					{
						"name": "STORE_LOCATION_ID",
						"type": "String"
					},
					{
						"name": "CUSTOMER_ID",
						"type": "String"
					},
					{
						"name": "PAYMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_store_location')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_STORE_LOCATION",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "STORE_LOCATION_ID",
						"type": "String"
					},
					{
						"name": "STORE_NAME",
						"type": "String"
					},
					{
						"name": "STORE_ADDRESS",
						"type": "String"
					},
					{
						"name": "STORE_PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "STORE_OPEN_TIME",
						"type": "String"
					},
					{
						"name": "STORE_CLOSE_TIME",
						"type": "String"
					},
					{
						"name": "STATE_COUNTRY_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_time')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "TIME_DATA",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "TIME_KEY",
						"type": "String"
					},
					{
						"name": "TIME_24HOUR",
						"type": "String"
					},
					{
						"name": "TIME_12HOUR",
						"type": "String"
					},
					{
						"name": "AM_PM_INDICATOR",
						"type": "String"
					},
					{
						"name": "MORNING_FLAG",
						"type": "String"
					},
					{
						"name": "LUNCHTIME_FLAG",
						"type": "String"
					},
					{
						"name": "AFTERNOON_FLAG",
						"type": "String"
					},
					{
						"name": "DINNERTIME_FLAG",
						"type": "String"
					},
					{
						"name": "EVENING_FLAG",
						"type": "String"
					},
					{
						"name": "LATE_EVENING_FLAG",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/emp_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept40.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/for_each_tgt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('target/for_each/',dataset().folder_name)",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lkp_dept')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept_lookup.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dept_id",
						"type": "String"
					},
					{
						"name": "dept_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lkp_src')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "lookup.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/location_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "location_dim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/prod_sub_catg')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_SUB_CATEGORY",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_SUBCATEGORY_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_SUBCATEGORY_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_SIZE",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_category')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "STG_PRODUCT_CATEGORY",
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_NAME",
						"type": "String"
					},
					{
						"name": "PRODUCT_CATEGORY_DESCRIPTION",
						"type": "String"
					},
					{
						"name": "IS_ACTIVE",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_dim')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "hr",
					"table": "product_dim"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/product_dim_scd')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Surr_Product_kEY",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_Name",
						"type": "varchar"
					},
					{
						"name": "Product_Price",
						"type": "decimal",
						"precision": 5,
						"scale": 2
					},
					{
						"name": "Is_Active",
						"type": "varchar"
					},
					{
						"name": "PRODUCT_CATEGORY_ID",
						"type": "varchar"
					},
					{
						"name": "Product_Category_Name",
						"type": "varchar"
					},
					{
						"name": "Product_SubCategory_ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Product_SubCategory_Name",
						"type": "varchar"
					},
					{
						"name": "Product_Size",
						"type": "varchar"
					},
					{
						"name": "Product_Description",
						"type": "varchar"
					},
					{
						"name": "Eff_Start_Date",
						"type": "date"
					},
					{
						"name": "Eff_End_Date",
						"type": "date"
					},
					{
						"name": "DM_CREATE_DATE",
						"type": "date"
					}
				],
				"typeProperties": {
					"schema": "hr",
					"table": "product_dim_scd"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/source_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "source/src_param",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_3')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "defaultdept.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "emp.txt",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "empid",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_lkp_dataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "dept_lookup.csv",
						"folderPath": "source",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "dept_id",
						"type": "String"
					},
					{
						"name": "dept_name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/target_switch')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"switch1": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('target/',dataset().switch1)",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/targetdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"parameter_dataset": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().parameter_dataset",
							"type": "Expression"
						},
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_DataLoad')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tgtfiles": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().tgtfiles",
							"type": "Expression"
						},
						"folderPath": "target/AzureProject/Stg",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					},
					{
						"name": "HIRE_DATE",
						"type": "String"
					},
					{
						"name": "JOB_ID",
						"type": "String"
					},
					{
						"name": "SALARY",
						"type": "String"
					},
					{
						"name": "COMMISSION_PCT",
						"type": "String"
					},
					{
						"name": "MANAGER_ID",
						"type": "String"
					},
					{
						"name": "DEPARTMENT_ID",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "tgt_dataflow",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_dataset_lookup')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"filename": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().filename",
							"type": "Expression"
						},
						"folderPath": "target/tgt_1",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_emp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "tgt_emp.csv",
						"folderPath": "target",
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "EMPLOYEE_ID",
						"type": "String"
					},
					{
						"name": "FIRST_NAME",
						"type": "String"
					},
					{
						"name": "LAST_NAME",
						"type": "String"
					},
					{
						"name": "EMAIL",
						"type": "String"
					},
					{
						"name": "PHONE_NUMBER",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_foreach')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"folder_name": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": {
							"value": "@concat('target/for_each/',dataset().folder_name)",
							"type": "Expression"
						},
						"fileSystem": "data"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tgt_oracle')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "Oracle",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "OracleTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/Oracle')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "linked service gen2",
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "ls_kv_dev",
							"type": "LinkedServiceReference"
						},
						"secretName": "PWDblob"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ls_kv_dev')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Oracle')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "Oracle",
				"typeProperties": {
					"connectionString": "[parameters('Oracle_connectionString')]"
				},
				"connectVia": {
					"referenceName": "SelfHostedIR",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/SelfHostedIR')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ls_kv_dev')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ls_kv_dev_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TUMBLING_trigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipeline": {
					"pipelineReference": {
						"referenceName": "copy_src_tgt_wait_activity",
						"type": "PipelineReference"
					},
					"parameters": {}
				},
				"type": "TumblingWindowTrigger",
				"typeProperties": {
					"frequency": "Minute",
					"interval": 5,
					"startTime": "2024-10-04T02:44:00Z",
					"endTime": "2024-10-05T02:42:00Z",
					"delay": "00:00:00",
					"maxConcurrency": 2,
					"retryPolicy": {
						"intervalInSeconds": 30
					},
					"dependsOn": []
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copy_src_tgt_wait_activity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger_src_tgt')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "copy_src_tgt_wait_activity",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 15,
						"startTime": "2024-10-02T22:49:00",
						"endTime": "2024-10-04T02:40:00",
						"timeZone": "Eastern Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/copy_src_tgt_wait_activity')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SelfHostedIR')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_data",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "cast1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"cast1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          HIRE_DATE,",
						"          SALARY,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 filter(EMPLOYEE_ID==100) ~> filter1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer '000'",
						"     ),",
						"     errors: true) ~> cast1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['dataflow_1.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/tgt_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_EMP')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_data",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "rank1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer '000',",
						"          SALARY as integer,",
						"          DEPARTMENT_ID as integer '000'",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 aggregate(groupBy(DEPARTMENT_ID),",
						"     sum_SALARY = sum(SALARY),",
						"          avg_salary = avg(SALARY)) ~> aggregate1",
						"sort1 keyGenerate(output(sq_emp_id as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"aggregate1 sort(asc(DEPARTMENT_ID, true)) ~> sort1",
						"surrogateKey1 rank(asc(DEPARTMENT_ID, true),",
						"     output(rank_col as long)) ~> rank1",
						"rank1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['dataflow_emp.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/tgt_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_EMP_agg_logic')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_data",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "cast1"
						},
						{
							"name": "aggregate1"
						},
						{
							"name": "sort1"
						},
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 cast(output(",
						"          EMPLOYEE_ID as integer '000',",
						"          SALARY as integer,",
						"          DEPARTMENT_ID as integer '000'",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 aggregate(groupBy(DEPARTMENT_ID),",
						"     sum_SALARY = sum(SALARY),",
						"          avg_salary = avg(SALARY)) ~> aggregate1",
						"select1 sort(asc(DEPARTMENT_ID, true),",
						"     partitionBy('hash', 1)) ~> sort1",
						"aggregate1, cast1 join(aggregate1@DEPARTMENT_ID == cast1@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          DEPARTMENT_ID = aggregate1@DEPARTMENT_ID,",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID,",
						"          DEPARTMENT_ID = cast1@DEPARTMENT_ID,",
						"          avg_salary",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"sort1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['dataflow_emp_agg.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/tgt_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_conditional_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "emp_data",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "src_3",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 split(DEPARTMENT_ID=='40',",
						"     disjoint: false) ~> split1@(dept40, default)",
						"split1@dept40 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string",
						"     ),",
						"     partitionFileNames:['dept40.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@default sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string",
						"     ),",
						"     partitionFileNames:['defaultdept.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/emp_data')]",
				"[concat(variables('factoryId'), '/datasets/src_3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_crossjoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "dept_table",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_emp",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(EMPLOYEE_ID==101,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID = source1@MANAGER_ID,",
						"          DEPARTMENT_ID = source1@DEPARTMENT_ID,",
						"          DEPARTMENT_ID = source2@DEPARTMENT_ID,",
						"          DEPARTMENT_NAME,",
						"          MANAGER_ID = source2@MANAGER_ID,",
						"          LOCATION_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string",
						"     ),",
						"     partitionFileNames:['crossjoin.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/dept_table')]",
				"[concat(variables('factoryId'), '/datasets/tgt_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow_joins')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "dept_table",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_emp",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          EMAIL,",
						"          PHONE_NUMBER,",
						"          HIRE_DATE,",
						"          JOB_ID,",
						"          SALARY,",
						"          COMMISSION_PCT,",
						"          MANAGER_ID = source1@MANAGER_ID,",
						"          DEPARTMENT_ID = source1@DEPARTMENT_ID,",
						"          DEPARTMENT_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string",
						"     ),",
						"     partitionFileNames:['emp_dept_joins.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/dept_table')]",
				"[concat(variables('factoryId'), '/datasets/tgt_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CHANNEL_REF_scd1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_channel",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablechannelref",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CHANNEL_ID as short,",
						"          CHANNEL_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(O_current_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Channel_ref_key as integer,",
						"          Channel_ID as integer,",
						"          Channel_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Channel_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Channel_ID = CHANNEL_ID,",
						"          Channel_Type = CHANNEL_TYPE,",
						"          STG_CREATE_DATE = O_current_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_channel')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablechannelref')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_CUSTOMER_STG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "customer",
								"type": "DatasetReference"
							},
							"name": "STGCUSTOMERS"
						},
						{
							"dataset": {
								"referenceName": "cust_address",
								"type": "DatasetReference"
							},
							"name": "CUSTOMERADDRESS"
						},
						{
							"dataset": {
								"referenceName": "customer_email",
								"type": "DatasetReference"
							},
							"name": "CUSTEMAIL"
						},
						{
							"dataset": {
								"referenceName": "customer_phno",
								"type": "DatasetReference"
							},
							"name": "CUSTPHONE"
						},
						{
							"dataset": {
								"referenceName": "cust_hutlover",
								"type": "DatasetReference"
							},
							"name": "HUTLOVER"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "customer_dim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "window1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "window2"
						},
						{
							"name": "filter2"
						},
						{
							"name": "window3"
						},
						{
							"name": "filter3"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "select1"
						},
						{
							"name": "filter4"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "surrogateKey1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          CUSTOMER_DOB as string,",
						"          CUSTOMER_TYPE as string,",
						"          IS_LOYAL as boolean,",
						"          FIRST_PURCHASE_DATE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGCUSTOMERS",
						"source(output(",
						"          Customer_Address_ID as short,",
						"          Address_Lane1 as string,",
						"          Address_Lane_2 as string,",
						"          City_Name as string,",
						"          State_Name as string,",
						"          Country_Name as string,",
						"          Zip_Code as integer,",
						"          Gate_Code as short,",
						"          Address_Type as string,",
						"          Address_Status as string,",
						"          Customer_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CUSTOMERADDRESS",
						"source(output(",
						"          CUSTOMER_EMAIL_ID as string,",
						"          CUSTOMER_EMAIL as string,",
						"          CUSTOMER_EMAIL_TYPE as string,",
						"          CUSTOMER_EMAIL_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CUSTEMAIL",
						"source(output(",
						"          CUSTOMER_PHONE_NUMBER_ID as string,",
						"          CUSTOMER_PHONE_NUMBER as string,",
						"          CUSTOMER_PHONE_TYPE as string,",
						"          CUSTOMER_PHONE_STATUS as string,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CUSTPHONE",
						"source(output(",
						"          HUT_LOVERS_ID as string,",
						"          JOINING_DATE as string,",
						"          IS_ACTIVE as string,",
						"          MEMBER_ID as string,",
						"          CUSTMOER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> HUTLOVER",
						"STGCUSTOMERS, derivedColumn1 join(STGCUSTOMERS@CUSTOMER_ID == CUSTOMERADDRESS@Customer_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"CUSTPHONE window(over(CUSTOMER_ID),",
						"     desc(CUSTOMER_PHONE_TYPE, true),",
						"     SECONDARY_PHONE_NUMBER = lead(CUSTOMER_PHONE_NUMBER),",
						"          RN_PH = rowNumber()) ~> window1",
						"window1 filter(RN_PH==1) ~> filter1",
						"CUSTEMAIL window(over(CUSTOMER_ID),",
						"     asc(CUSTOMER_EMAIL_TYPE, true),",
						"     SECONDARY_EMAIL = lead(CUSTOMER_EMAIL),",
						"          RN_EMAIL = rowNumber()) ~> window2",
						"window2 filter(RN_EMAIL==1) ~> filter2",
						"filter4 window(over(Customer_ID),",
						"     desc(Address_Type, true),",
						"     O_ADDRESS_LANE1 = lead(Address_Lane1),",
						"          O_ADDRESS_LANE2 = lead(Address_Lane_2),",
						"          O_CITY_NAME = lead(City_Name),",
						"          O_STATE_NAME = lead(State_Name),",
						"          O_COUNTRY_NAME = lead(Country_Name),",
						"          O_ZIP_CODE = lead(Zip_Code),",
						"          O_GATE_CODE = lead(Gate_Code),",
						"          RN_ADDRESS = rowNumber(),",
						"     partitionBy('hash', 1)) ~> window3",
						"window3 filter(RN_ADDRESS==1) ~> filter3",
						"join1, filter1 join(STGCUSTOMERS@CUSTOMER_ID == CUSTPHONE@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, filter2 join(STGCUSTOMERS@CUSTOMER_ID == CUSTEMAIL@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, HUTLOVER join(STGCUSTOMERS@CUSTOMER_ID == CUSTMOER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4 select(mapColumn(",
						"          CUSTOMER_ID = STGCUSTOMERS@CUSTOMER_ID,",
						"          CUSTOMER_FIRST_NAME,",
						"          CUSTOMER_LAST_NAME,",
						"          IS_LOYAL,",
						"          PRIMARY_EMAIL = CUSTOMER_EMAIL,",
						"          SECONDARY_EMAIL,",
						"          PRIMARY_PHONE_NUMBER = CUSTOMER_PHONE_NUMBER,",
						"          SECONDARY_PHONE_NUMBER,",
						"          R_Address_Lane1 = Address_Lane1,",
						"          R_Address_Lane_2 = Address_Lane_2,",
						"          R_City_Name = City_Name,",
						"          R_State_Name = State_Name,",
						"          R_Country_Name = Country_Name,",
						"          R_Zip_Code = Zip_Code,",
						"          R_Gate_Code = Gate_Code,",
						"          O_ADDRESS_LANE1,",
						"          O_ADDRESS_LANE2,",
						"          O_CITY_NAME,",
						"          O_STATE_NAME,",
						"          O_COUNTRY_NAME,",
						"          O_ZIP_CODE,",
						"          O_GATE_CODE,",
						"          JOINING_DATE",
						"     ),",
						"     partitionBy('hash', 1),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"CUSTOMERADDRESS filter(Address_Status=='Active') ~> filter4",
						"filter3 derive(O_ADDRESS_LANE1 = case(Address_Type=='Office', Address_Lane1,O_ADDRESS_LANE1),",
						"          O_ADDRESS_LANE2 = case(Address_Type=='Office', Address_Lane_2,O_ADDRESS_LANE2),",
						"          O_CITY_NAME = case(Address_Type=='Office', City_Name,O_CITY_NAME),",
						"          O_STATE_NAME = case(Address_Type=='Office', State_Name,O_STATE_NAME),",
						"          O_COUNTRY_NAME = case(Address_Type=='Office', Country_Name,O_COUNTRY_NAME),",
						"          O_ZIP_CODE = case(Address_Type=='Office', Zip_Code,O_ZIP_CODE),",
						"          O_GATE_CODE = case(Address_Type=='Office', Gate_Code,O_GATE_CODE),",
						"          Address_Lane1 = case(Address_Type == 'Office','NULL',Address_Lane1),",
						"          Address_Lane_2 = case(Address_Type == 'Office','NULL',Address_Lane_2),",
						"          City_Name = case(Address_Type == 'Office','NULL',City_Name),",
						"          State_Name = case(Address_Type == 'Office','NULL',State_Name),",
						"          Country_Name = case(Address_Type == 'Office','NULL',Country_Name),",
						"          Zip_Code = case(Address_Type == 'Office',0,Zip_Code),",
						"          Gate_Code = case(Address_Type == 'Office',0)) ~> derivedColumn1",
						"surrogateKey1 derive(STG_CREATE_DATE = currentDate()) ~> derivedColumn2",
						"select1 keyGenerate(output(CUSTOMER_DIM_KEY as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"derivedColumn2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     partitionBy('hash', 1),",
						"     preCommands: [],",
						"     postCommands: []) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/customer')]",
				"[concat(variables('factoryId'), '/datasets/cust_address')]",
				"[concat(variables('factoryId'), '/datasets/customer_email')]",
				"[concat(variables('factoryId'), '/datasets/customer_phno')]",
				"[concat(variables('factoryId'), '/datasets/cust_hutlover')]",
				"[concat(variables('factoryId'), '/datasets/customer_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_DELIVERY_TYPE_REF_scd1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_DELIVERY_TYPE",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableDELIVERY_TYPE_REF",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          DELIVERY_ID as short,",
						"          DELIVERY_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(o_current_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Delivery_Type_Ref_key as integer,",
						"          Delivery_Type_ID as integer,",
						"          Delivery_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Delivery_Type_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Delivery_Type_ID = DELIVERY_ID,",
						"          Delivery_Type = DELIVERY_TYPE,",
						"          STG_CREATE_DATE = o_current_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_DELIVERY_TYPE')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDELIVERY_TYPE_REF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_LOCATIONS_DIM_SCD2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "location_dim",
								"type": "DatasetReference"
							},
							"name": "srclocationdim"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_location_dim_scd",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_location_dim_scd",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "insertfilter"
						},
						{
							"name": "updatefilter"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          src_Store_Location_ID as short,",
						"          src_Store_Name as string,",
						"          src_Store_Address as string,",
						"          src_Store_Open_Time as string,",
						"          src_Store_Close_Time as string,",
						"          src_State_Name as string,",
						"          tgt_Store_Location_ID as integer,",
						"          tgt_Store_Name as string,",
						"          tgt_Store_Address as string,",
						"          tgt_Store_Open_Time as string,",
						"          tgt_Store_Close_Time as string,",
						"          tgt_State_Name as string,",
						"          tgt_FLAG as string,",
						"          Loc_Dim_Key as integer,",
						"          DM_CREATE_DATE as date,",
						"          src_md5 as binary,",
						"          tgt_md5 as binary,",
						"          flag_new as string,",
						"          flag_deactivate as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: ' select \\r\\nsrc_Store_Location_ID\\r\\n,src_Store_Name\\r\\n,src_Store_Address\\r\\n,src_Store_Open_Time\\r\\n,src_Store_Close_Time\\r\\n,src_State_Name\\r\\n,tgt_Store_Location_ID\\r\\n,tgt_Store_Name\\r\\n,tgt_Store_Address\\r\\n,tgt_Store_Open_Time\\r\\n,tgt_Store_Close_Time\\r\\n,tgt_State_Name\\r\\n,tgt_FLAG\\r\\n,Loc_Dim_Key\\r\\n,DM_CREATE_DATE\\r\\n,src_md5\\r\\n,tgt_md5\\r\\n,case when tgt_Store_Location_ID is NULL or src_md5 <> tgt_md5 then \\'Y\\' end flag_new\\r\\n,case when tgt_Store_Location_ID is not NULL and src_md5 <> tgt_md5 then \\'N\\' end flag_deactivate\\r\\nfrom ( \\r\\nselect \\r\\nA.Store_Location_ID as src_Store_Location_ID,\\r\\nA.Store_Name as src_Store_Name,\\r\\nA.Store_Address as src_Store_Address,\\r\\nA.Store_Open_Time as src_Store_Open_Time,\\r\\nA.Store_Close_Time as src_Store_Close_Time,\\r\\nA.State_Name as src_State_Name,\\r\\nB.Store_Location_ID as tgt_Store_Location_ID,\\r\\nB.Store_Name as tgt_Store_Name,\\r\\nB.Store_Address as tgt_Store_Address,\\r\\nB.Store_Open_Time as tgt_Store_Open_Time,\\r\\nB.Store_Close_Time as tgt_Store_Close_Time,\\r\\nB.State_Name as tgt_State_Name,\\r\\nB.FLAG as tgt_FLAG,\\r\\nB.Loc_Dim_Key,\\r\\ncast(getdate() as date) as DM_CREATE_DATE,\\r\\nHashBytes(\\'MD5\\',concat(cast(A.Store_Name as varchar),cast(A.Store_Address as varchar),cast(A.Store_Open_Time as varchar),cast(A.Store_Close_Time as varchar),cast(A.State_Name as varchar))) as src_md5,\\r\\nHashBytes(\\'MD5\\',concat(cast(B.Store_Name as varchar),cast(B.Store_Address as varchar),cast(B.Store_Open_Time as varchar),cast(B.Store_Close_Time as varchar),cast(B.State_Name as varchar))) as tgt_md5\\r\\nfrom HR.location_dim A \\r\\nleft Join HR.location_dim_scd B on \\r\\nA.Store_Location_ID = B.Store_Location_ID\\r\\nand B.FLAG = \\'Y\\'\\r\\n)a',",
						"     format: 'query') ~> srclocationdim",
						"srclocationdim filter(isNull(tgt_Store_Location_ID) || src_md5!=tgt_md5) ~> insertfilter",
						"srclocationdim filter(!isNull(tgt_Store_Location_ID) && src_md5 != tgt_md5) ~> updatefilter",
						"updatefilter alterRow(updateIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Loc_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Loc_Dim_Key,",
						"          FLAG = flag_deactivate",
						"     )) ~> sink1",
						"insertfilter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Loc_Dim_Key as integer,",
						"          Store_Location_ID as integer,",
						"          Store_Name as string,",
						"          Store_Address as string,",
						"          Store_Open_Time as string,",
						"          Store_Close_Time as string,",
						"          State_Name as string,",
						"          FLAG as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Store_Location_ID = src_Store_Location_ID,",
						"          Store_Name = src_Store_Name,",
						"          Store_Address = src_Store_Address,",
						"          Store_Open_Time = src_Store_Open_Time,",
						"          Store_Close_Time = src_Store_Close_Time,",
						"          State_Name = src_State_Name,",
						"          FLAG = flag_new,",
						"          DM_CREATE_DATE",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/location_dim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_location_dim_scd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PAYMENT_REF_scd1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_payment_ref",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTablePAYMENT_REF",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PAYMENT_ID as short,",
						"          PAYMENT_TYPE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 derive(o_current_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Payment_Ref_Key as integer,",
						"          Payment_ID as integer,",
						"          Payment_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['Payment_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Payment_ID = PAYMENT_ID,",
						"          Payment_Type = PAYMENT_TYPE,",
						"          STG_CREATE_DATE = o_current_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_payment_ref')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablePAYMENT_REF')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PRODUCT_TOPPINGS_DIM_scd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_TOPPINGS_DIM",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_product_toppings",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_TOPPINGS_DIM",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_TOPPINGS_DIM",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "updatefilter"
						},
						{
							"name": "Insertfilter"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Product_Topping_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Effective_Date as date,",
						"          END_DATE as date,",
						"          Flag as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          PRODUCT_TOPPING_ID as integer,",
						"          TOPPING_NAME as string,",
						"          TOPING_PRICE as string,",
						"          IS_ACTIVE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source2 select(mapColumn(",
						"          src_PRODUCT_TOPPING_ID = PRODUCT_TOPPING_ID,",
						"          src_TOPPING_NAME = TOPPING_NAME,",
						"          src_TOPING_PRICE = TOPING_PRICE,",
						"          src_IS_ACTIVE = IS_ACTIVE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, filter1 lookup(src_PRODUCT_TOPPING_ID == Product_Topping_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(src_md5 = md5(concat(src_TOPPING_NAME,toString(src_TOPING_PRICE))),",
						"          tgt_md5 = md5(concat(Topping_Name,toString(Topping_Price))),",
						"          DM_CREATE_DATE = currentDate(),",
						"          Effective_date = currentDate(),",
						"          END_DATE = currentDate(),",
						"          ACTIVE_FLAG = 'Y',",
						"          INACTIVE_FLAG = 'N') ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(Product_Topping_ID) && src_md5 != tgt_md5) ~> updatefilter",
						"derivedColumn1 filter(isNull(Product_Topping_ID) || src_md5 != tgt_md5) ~> Insertfilter",
						"updatefilter alterRow(updateIf(1==1)) ~> alterRow1",
						"source1 filter(Flag=='Y') ~> filter1",
						"Insertfilter sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Topping_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Effective_Date as date,",
						"          END_DATE as date,",
						"          Flag as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Topping_ID = src_PRODUCT_TOPPING_ID,",
						"          Topping_Name = src_TOPPING_NAME,",
						"          Topping_Price = src_TOPING_PRICE,",
						"          Is_Active = src_IS_ACTIVE,",
						"          Effective_Date = derivedColumn1@Effective_date,",
						"          Flag = ACTIVE_FLAG,",
						"          DM_CREATE_DATE",
						"     )) ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Product_Topping_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Effective_Date as date,",
						"          END_DATE as date,",
						"          Flag as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Product_Topping_Dim_Key'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_Topping_Dim_Key,",
						"          END_DATE,",
						"          Flag = INACTIVE_FLAG",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PRODUCT_TOPPINGS_DIM')]",
				"[concat(variables('factoryId'), '/datasets/ds_product_toppings')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_PROMOTION_DIM_SCD3')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_promotions_stg",
								"type": "DatasetReference"
							},
							"name": "STGPROMOTIONS"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMOTION_SCD3",
								"type": "DatasetReference"
							},
							"name": "PROMOTIONDIM"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMOTION_SCD3",
								"type": "DatasetReference"
							},
							"name": "INSERT"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMOTION_SCD3",
								"type": "DatasetReference"
							},
							"name": "UPDATE"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "filter2"
						},
						{
							"name": "ALTER"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select1"
						},
						{
							"name": "cast1"
						},
						{
							"name": "derivedColumn3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as string,",
						"          START_DATE as date,",
						"          END_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> STGPROMOTIONS",
						"source(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> PROMOTIONDIM",
						"derivedColumn2, select1 lookup(PROMOTION_ID == TGT_PROMOTION_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 derive(SRC_MD5 = md5(concat(PROMOTION_NAME,PROMOTION_TYPE,toString(DISCOUNT_AMOUNT),toString(START_DATE),toString(END_DATE))),",
						"          STG_CREATE_DATE = currentDate(),",
						"          TGT_MD5 = md5(concat(TGT_PROMOTION_NAME,toString(TGT_PROMOTION_TYPE),toString(TGT_DISCOUNT_AMOUNT),toString(TGT_START_DATE),toString(TGT_END_DATE))),",
						"          DISCOUNT_AMOUNT = toDecimal(DISCOUNT_AMOUNT, 5, 2)) ~> derivedColumn1",
						"derivedColumn1 filter(!isNull(TGT_PROMOTION_ID) && SRC_MD5 != TGT_MD5) ~> filter1",
						"derivedColumn1 filter(isNull(TGT_PROMOTION_ID)  && SRC_MD5 != TGT_MD5) ~> filter2",
						"derivedColumn3 alterRow(updateIf(1==1)) ~> ALTER",
						"STGPROMOTIONS derive(DISCOUNT_AMOUNT = toDecimal(replace(toString(DISCOUNT_AMOUNT), '%', ''))) ~> derivedColumn2",
						"cast1 select(mapColumn(",
						"          PROMOTION_DIM_KEY,",
						"          TGT_PROMOTION_ID = PROMOTION_ID,",
						"          TGT_PROMOTION_NAME = PROMOTION_NAME,",
						"          TGT_PREVIOUS_PROMOTION_NAME = PREVIOUS_PROMOTION_NAME,",
						"          TGT_PROMOTION_TYPE = PROMOTION_TYPE,",
						"          TGT_PREVIOUS_PROMOTION_TYPE = PREVIOUS_PROMOTION_TYPE,",
						"          TGT_DISCOUNT_AMOUNT = DISCOUNT_AMOUNT,",
						"          TGT_PREVIOUS_DISCOUNT_AMOUNT = PREVIOUS_DISCOUNT_AMOUNT,",
						"          TGT_START_DATE = START_DATE,",
						"          TGT_PREVIOUS_START_DATE = PREVIOUS_START_DATE,",
						"          TGT_END_DATE = END_DATE,",
						"          TGT_PREVIOUS_END_DATE = PREVIOUS_END_DATE,",
						"          TGT_STG_CREATE_DATE = STG_CREATE_DATE",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"PROMOTIONDIM cast(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          PROMOTION_ID as integer,",
						"          PROMOTION_NAME as string,",
						"          PREVIOUS_PROMOTION_NAME as string,",
						"          PROMOTION_TYPE as string,",
						"          PREVIOUS_PROMOTION_TYPE as string,",
						"          DISCOUNT_AMOUNT as decimal(5,2),",
						"          PREVIOUS_DISCOUNT_AMOUNT as decimal(5,2),",
						"          START_DATE as date,",
						"          PREVIOUS_START_DATE as date,",
						"          END_DATE as date,",
						"          PREVIOUS_END_DATE as date,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     errors: true) ~> cast1",
						"filter1 derive(PROMOTION_NAME1 = iif(PROMOTION_NAME != TGT_PROMOTION_NAME,TGT_PROMOTION_NAME,''),",
						"          PROMOTION_TYPE1 = iif(PROMOTION_TYPE != TGT_PROMOTION_TYPE,TGT_PROMOTION_TYPE,''),",
						"          DISCOUNT_AMOUNT1 = iif(DISCOUNT_AMOUNT != TGT_DISCOUNT_AMOUNT,TGT_DISCOUNT_AMOUNT,toDecimal(0)),",
						"          START_DATE1 = iif(START_DATE != TGT_START_DATE, TGT_START_DATE,toDate(null())),",
						"          END_DATE1 = iif(END_DATE != TGT_END_DATE, TGT_END_DATE,toDate(null()))) ~> derivedColumn3",
						"filter2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          Promotion_ID as integer,",
						"          Promotion_Name as string,",
						"          previous_Promotion_Name as string,",
						"          Promotion_Type as string,",
						"          previous_Promotion_Type as string,",
						"          Discount_amount as decimal(5,2),",
						"          previous_Discount_amount as decimal(5,2),",
						"          START_DATE as date,",
						"          Previous_START_DATE as date,",
						"          END_DATE as date,",
						"          previous_END_DATE as date,",
						"          stg_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_ID,",
						"          PROMOTION_NAME,",
						"          PROMOTION_TYPE,",
						"          DISCOUNT_AMOUNT,",
						"          START_DATE,",
						"          END_DATE,",
						"          STG_CREATE_DATE",
						"     )) ~> INSERT",
						"ALTER sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          PROMOTION_DIM_KEY as integer,",
						"          Promotion_ID as integer,",
						"          Promotion_Name as string,",
						"          previous_Promotion_Name as string,",
						"          Promotion_Type as string,",
						"          previous_Promotion_Type as string,",
						"          Discount_amount as decimal(5,2),",
						"          previous_Discount_amount as decimal(5,2),",
						"          START_DATE as date,",
						"          Previous_START_DATE as date,",
						"          END_DATE as date,",
						"          previous_END_DATE as date,",
						"          stg_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PROMOTION_DIM_KEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PROMOTION_DIM_KEY,",
						"          PROMOTION_ID,",
						"          PROMOTION_NAME,",
						"          PREVIOUS_PROMOTION_NAME = PROMOTION_NAME1,",
						"          PROMOTION_TYPE,",
						"          PREVIOUS_PROMOTION_TYPE = PROMOTION_TYPE1,",
						"          DISCOUNT_AMOUNT,",
						"          PREVIOUS_DISCOUNT_AMOUNT = DISCOUNT_AMOUNT1,",
						"          START_DATE,",
						"          PREVIOUS_START_DATE = START_DATE1,",
						"          END_DATE,",
						"          PREVIOUS_END_DATE = END_DATE1,",
						"          STG_CREATE_DATE",
						"     )) ~> UPDATE"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_promotions_stg')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PROMOTION_SCD3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_Product_Dim_scd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "product_dim",
								"type": "DatasetReference"
							},
							"name": "SrcProduct"
						},
						{
							"dataset": {
								"referenceName": "product_dim_scd",
								"type": "DatasetReference"
							},
							"name": "ProductDimSCD"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "product_dim_scd",
								"type": "DatasetReference"
							},
							"name": "Insertsink"
						},
						{
							"dataset": {
								"referenceName": "product_dim_scd",
								"type": "DatasetReference"
							},
							"name": "Updatesink"
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filterInsert"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "select1"
						},
						{
							"name": "filterUpdate"
						},
						{
							"name": "derivedColumn4"
						},
						{
							"name": "select2"
						},
						{
							"name": "alterRow2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_DIM_KEY as long,",
						"          PRODUCT_ID as short,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as short,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_ID as short,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          CREATE_USER_DATE as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> SrcProduct",
						"source(output(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'select * from hr.product_dim_scd where Eff_End_Date IS NULL',",
						"     format: 'query') ~> ProductDimSCD",
						"SrcProduct filter(IS_ACTIVE == 'Active') ~> filter1",
						"filter1 derive(src_md5 = md5(concat(PRODUCT_NAME,PRODUCT_PRICE,PRODUCT_DESCRIPTION,toString(PRODUCT_SUBCATEGORY_ID),PRODUCT_SUBCATEGORY_NAME,PRODUCT_SIZE,PRODUCT_CATEGORY_NAME,toString(PRODUCT_CATEGORY_ID)))) ~> derivedColumn1",
						"ProductDimSCD derive(tgt_MD5 = md5(\r",
						"  concat(\r",
						"    Product_Name,\r",
						"    toString(Product_Price),\r",
						"    Product_Description,\r",
						"    toString(Product_SubCategory_ID),\r",
						"    Product_SubCategory_Name,\r",
						"    Product_Size,\r",
						"    Product_Category_Name,\r",
						"    toString(PRODUCT_CATEGORY_ID)\r",
						"  )\r",
						")) ~> derivedColumn2",
						"derivedColumn1, derivedColumn2 lookup(SrcProduct@PRODUCT_ID == ProductDimSCD@Product_ID,",
						"     multiple: true,",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(isNull(Surr_Product_kEY) || src_md5 != tgt_MD5) ~> filterInsert",
						"filterInsert derive(o_Date = currentDate(),",
						"          dm_Date = currentDate()) ~> derivedColumn3",
						"derivedColumn3 select(mapColumn(",
						"          PRODUCT_ID = SrcProduct@PRODUCT_ID,",
						"          PRODUCT_NAME = SrcProduct@PRODUCT_NAME,",
						"          PRODUCT_PRICE = SrcProduct@PRODUCT_PRICE,",
						"          PRODUCT_DESCRIPTION = SrcProduct@PRODUCT_DESCRIPTION,",
						"          IS_ACTIVE = SrcProduct@IS_ACTIVE,",
						"          PRODUCT_SUBCATEGORY_ID = SrcProduct@PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME = SrcProduct@PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE = SrcProduct@PRODUCT_SIZE,",
						"          PRODUCT_CATEGORY_ID = SrcProduct@PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME = SrcProduct@PRODUCT_CATEGORY_NAME,",
						"          o_Date,",
						"          dm_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"lookup1 filter(src_md5 != tgt_MD5) ~> filterUpdate",
						"filterUpdate derive(o_Date = currentDate()) ~> derivedColumn4",
						"derivedColumn4 select(mapColumn(",
						"          Surr_Product_kEY,",
						"          o_Date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 alterRow(updateIf(1==1)) ~> alterRow2",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Product_ID = PRODUCT_ID,",
						"          Product_Name = PRODUCT_NAME,",
						"          Product_Price = PRODUCT_PRICE,",
						"          Is_Active = IS_ACTIVE,",
						"          PRODUCT_CATEGORY_ID,",
						"          Product_Category_Name = PRODUCT_CATEGORY_NAME,",
						"          Product_SubCategory_ID = PRODUCT_SUBCATEGORY_ID,",
						"          Product_SubCategory_Name = PRODUCT_SUBCATEGORY_NAME,",
						"          Product_Size = PRODUCT_SIZE,",
						"          Product_Description = PRODUCT_DESCRIPTION,",
						"          Eff_Start_Date = o_Date,",
						"          DM_CREATE_DATE = dm_Date",
						"     )) ~> Insertsink",
						"alterRow2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Surr_Product_kEY as integer,",
						"          Product_ID as integer,",
						"          Product_Name as string,",
						"          Product_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          Product_Category_Name as string,",
						"          Product_SubCategory_ID as integer,",
						"          Product_SubCategory_Name as string,",
						"          Product_Size as string,",
						"          Product_Description as string,",
						"          Eff_Start_Date as date,",
						"          Eff_End_Date as date,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['Surr_Product_kEY'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Surr_Product_kEY,",
						"          Eff_End_Date = o_Date,",
						"          DM_CREATE_DATE = o_Date",
						"     )) ~> Updatesink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/product_dim')]",
				"[concat(variables('factoryId'), '/datasets/product_dim_scd')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_STORE_LOCATION_STG')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_store_location",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ds_state_country",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "location_dim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "select2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          STORE_LOCATION_ID as short,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_COUNTRY_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          STATE_COUNTRY_ID as short,",
						"          STATE_NAME as string,",
						"          STATE_ABBREVATION as string,",
						"          STATE_COUNTRY as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 join(source1@STATE_COUNTRY_ID == source2@STATE_COUNTRY_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          STORE_LOCATION_ID,",
						"          STORE_NAME,",
						"          STORE_ADDRESS,",
						"          STORE_PHONE_NUMBER,",
						"          STORE_OPEN_TIME,",
						"          STORE_CLOSE_TIME,",
						"          STATE_NAME,",
						"          STATE_COUNTRY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(Location_Dim_Key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(create_user_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 select(mapColumn(",
						"          Location_Dim_Key,",
						"          STORE_LOCATION_ID,",
						"          STORE_NAME,",
						"          STORE_ADDRESS,",
						"          STORE_PHONE_NUMBER,",
						"          STORE_OPEN_TIME,",
						"          STORE_CLOSE_TIME,",
						"          STATE_NAME,",
						"          STATE_COUNTRY,",
						"          create_user_date",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_store_location')]",
				"[concat(variables('factoryId'), '/datasets/ds_state_country')]",
				"[concat(variables('factoryId'), '/datasets/location_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_alterrow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "dept_table",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_emp",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, source2 lookup(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 alterRow(updateIf(iif(source1@DEPARTMENT_ID==source2@DEPARTMENT_ID,true(),false()))) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string",
						"     ),",
						"     partitionFileNames:['alter_row.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/dept_table')]",
				"[concat(variables('factoryId'), '/datasets/tgt_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_alterrow_azuresqlDB')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						},
						{
							"name": "join1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as integer,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          EMPLOYEE_ID as short,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as short,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as short,",
						"          department_name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"join1 alterRow(deleteIf(isNull(source1@EMPLOYEE_ID))) ~> alterRow1",
						"source1, source2 join(source1@EMPLOYEE_ID == source2@EMPLOYEE_ID,",
						"     joinType:'right',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:true,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:false,",
						"     keys:['EMPLOYEE_ID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          EMPLOYEE_ID = source2@EMPLOYEE_ID,",
						"          FIRST_NAME = source1@FIRST_NAME,",
						"          LAST_NAME = source1@LAST_NAME,",
						"          EMAIL = source1@EMAIL,",
						"          PHONE_NUMBER = source1@PHONE_NUMBER,",
						"          HIRE_DATE = source1@HIRE_DATE,",
						"          JOB_ID = source1@JOB_ID,",
						"          SALARY = source1@SALARY,",
						"          COMMISSION_PCT = source1@COMMISSION_PCT,",
						"          MANAGER_ID = source1@MANAGER_ID,",
						"          DEPARTMENT_ID = source1@DEPARTMENT_ID",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_fact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_stg_order_line",
								"type": "DatasetReference"
							},
							"name": "order"
						},
						{
							"dataset": {
								"referenceName": "ds_order_line",
								"type": "DatasetReference"
							},
							"name": "OrderLines"
						},
						{
							"dataset": {
								"referenceName": "customer_dim",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "location_dim",
								"type": "DatasetReference"
							},
							"name": "locationdim"
						},
						{
							"dataset": {
								"referenceName": "product_dim",
								"type": "DatasetReference"
							},
							"name": "productdim"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PRODUCT_TOPPINGS_DIM",
								"type": "DatasetReference"
							},
							"name": "ProductTopping"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTable_PROMOTION_SCD3",
								"type": "DatasetReference"
							},
							"name": "promotions"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTablePAYMENT_REF",
								"type": "DatasetReference"
							},
							"name": "payment"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTablechannelref",
								"type": "DatasetReference"
							},
							"name": "channel"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDELIVERY_TYPE_REF",
								"type": "DatasetReference"
							},
							"name": "DeliveryType"
						},
						{
							"dataset": {
								"referenceName": "ds_date",
								"type": "DatasetReference"
							},
							"name": "date"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_SALES_FACT",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "join3"
						},
						{
							"name": "join4"
						},
						{
							"name": "join5"
						},
						{
							"name": "join6"
						},
						{
							"name": "join7"
						},
						{
							"name": "join8"
						},
						{
							"name": "join9"
						},
						{
							"name": "join10"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ORDER_ID as integer,",
						"          ORDER_DATE as string,",
						"          ORDER_STATUS as string,",
						"          TOTAL_AMOUNT as double,",
						"          TOTAL_TAX as double,",
						"          TIPS as double,",
						"          TOTAL_QUANTITY as short,",
						"          DELIVERY_ID as short,",
						"          CHANNEL_ID as short,",
						"          STORE_LOCATION_ID as short,",
						"          CUSTOMER_ID as short,",
						"          PAYMENT_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> order",
						"source(output(",
						"          ORDER_LINE_ID as integer,",
						"          UNIT_PRICE as string,",
						"          QUANTITY as string,",
						"          PROMOTION_AMOUNT as string,",
						"          PROMOTION_ID as integer,",
						"          ORDER_ID as integer,",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_TOPPING_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> OrderLines",
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          PRIMARY_EMAIL as string,",
						"          SECONDARY_EMAIL as string,",
						"          PRIMARY_PHONE_NUMBER as string,",
						"          SECONDARY_PHONE_NUMBER as string,",
						"          R_Address_Lane1 as string,",
						"          R_Address_Lane_2 as string,",
						"          R_City_Name as string,",
						"          R_State_Name as string,",
						"          R_Country_Name as string,",
						"          R_Zip_Code as integer,",
						"          R_Gate_Code as integer,",
						"          O_ADDRESS_LANE1 as string,",
						"          O_ADDRESS_LANE2 as string,",
						"          O_CITY_NAME as string,",
						"          O_STATE_NAME as string,",
						"          O_COUNTRY_NAME as string,",
						"          O_ZIP_CODE as integer,",
						"          O_GATE_CODE as short,",
						"          JOINING_DATE as string,",
						"          CUSTOMER_DIM_KEY as long,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> customer",
						"source(output(",
						"          Location_Dim_Key as long,",
						"          STORE_LOCATION_ID as short,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_NAME as string,",
						"          STATE_COUNTRY as string,",
						"          create_user_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> locationdim",
						"source(output(",
						"          PRODUCT_ID as integer,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as string,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          product_dim_key as long,",
						"          stg_create_date as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> productdim",
						"source(output(",
						"          Product_Topping_Dim_Key as integer,",
						"          Product_Topping_ID as integer,",
						"          Topping_Name as string,",
						"          Topping_Price as decimal(5,2),",
						"          Is_Active as string,",
						"          Effective_Date as date,",
						"          END_DATE as date,",
						"          Flag as string,",
						"          DM_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ProductTopping",
						"source(output(",
						"          PROMOTION_DIM_KEY as integer,",
						"          Promotion_ID as integer,",
						"          Promotion_Name as string,",
						"          previous_Promotion_Name as string,",
						"          Promotion_Type as string,",
						"          previous_Promotion_Type as string,",
						"          Discount_amount as decimal(5,2),",
						"          previous_Discount_amount as decimal(5,2),",
						"          START_DATE as date,",
						"          Previous_START_DATE as date,",
						"          END_DATE as date,",
						"          previous_END_DATE as date,",
						"          stg_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> promotions",
						"source(output(",
						"          Payment_Ref_Key as integer,",
						"          Payment_ID as integer,",
						"          Payment_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> payment",
						"source(output(",
						"          Channel_ref_key as integer,",
						"          Channel_ID as integer,",
						"          Channel_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> channel",
						"source(output(",
						"          Delivery_Type_Ref_key as integer,",
						"          Delivery_Type_ID as integer,",
						"          Delivery_Type as string,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> DeliveryType",
						"source(output(",
						"          DATE_KEY as string,",
						"          DAY_YYYY_MM_DD as string,",
						"          DAY_US_MM_DD_YYYY as string,",
						"          DAY_US_LONG as string,",
						"          DAY_US_M_D_YY as string,",
						"          WEEK_SHORT as string,",
						"          WEEK_NUMBER as string,",
						"          WEEK_LONG as string,",
						"          MONTH_IN_QUARTER_NUMBER as string,",
						"          MONTH_IN_YEAR_SHORT as string,",
						"          MONTH_IN_YEAR_LONG as string,",
						"          WEEK_WK_QTR_YEAR as string,",
						"          WEEK_FROM_TO as string,",
						"          WEEK_STARTING as string,",
						"          WEEK_WK_YEAR_CONT as string,",
						"          WEEK_WK_YEAR as string,",
						"          WEEK_WK_QTR_YEAR_CONT as string,",
						"          DAY_IN_WEEK_SHORT as string,",
						"          DAY_IN_WEEK_NUMBER as string,",
						"          DAY_IN_WEEK_LONG as string,",
						"          MONTH_SHORT as string,",
						"          MONTH_NUMBER as string,",
						"          MONTH_LONG as string,",
						"          QUARTER_SHORT_US as string,",
						"          YEAR as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> date",
						"order, OrderLines join(order@ORDER_ID == OrderLines@ORDER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, customer join(order@CUSTOMER_ID == customer@CUSTOMER_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2, locationdim join(order@STORE_LOCATION_ID == locationdim@STORE_LOCATION_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"join3, productdim join(OrderLines@PRODUCT_ID == productdim@PRODUCT_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join4",
						"join4, ProductTopping join(OrderLines@PRODUCT_TOPPING_ID == ProductTopping@Product_Topping_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join5",
						"join5, promotions join(OrderLines@PROMOTION_ID == promotions@Promotion_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join6",
						"join6, payment join(order@PAYMENT_ID == payment@Payment_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join7",
						"join7, channel join(order@CHANNEL_ID == channel@Channel_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join8",
						"join8, DeliveryType join(DELIVERY_ID == Delivery_Type_ID,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join9",
						"join9, date join(ORDER_DATE == DAY_US_MM_DD_YYYY,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join10",
						"join10 select(mapColumn(",
						"          ORDER_LINE_ID,",
						"          ORDER_ID = order@ORDER_ID,",
						"          CUSTOMER_DIM_KEY,",
						"          PAYMENT_DIM_KEY = Payment_Ref_Key,",
						"          CHANNEL_DIM_KEY = Channel_ref_key,",
						"          DELIVERY_DIM_KEY = Delivery_Type_Ref_key,",
						"          product_topping_dim = Product_Topping_Dim_Key,",
						"          location_dim_key = Location_Dim_Key,",
						"          product_dim_key,",
						"          promotion_dim_key = PROMOTION_DIM_KEY,",
						"          order_date = ORDER_DATE,",
						"          order_status = ORDER_STATUS,",
						"          quantity = TOTAL_QUANTITY,",
						"          unit_price = UNIT_PRICE,",
						"          topping_price = Topping_Price,",
						"          promotion_amount = PROMOTION_AMOUNT,",
						"          date_key = DATE_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(dm_create_date = currentDate()) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Order_Line_ID as integer,",
						"          Order_ID as integer,",
						"          CUSTOMER_DIM_KEY as integer,",
						"          Payment_Ref_Key as integer,",
						"          channel_ref_key as integer,",
						"          Delivery_Type_Ref_key as integer,",
						"          Topping_Dim_Key as integer,",
						"          Location_Dim_Key as integer,",
						"          product_dim_kEY as integer,",
						"          PROMOTION_DIM_KEY as integer,",
						"          Date_Key as integer,",
						"          Order_Date as date,",
						"          Order_Status as string,",
						"          Quantity as decimal(5,2),",
						"          Unit_price as decimal(5,2),",
						"          Topping_Price as decimal(5,2),",
						"          Promotion_Amount as decimal(5,3),",
						"          DM_create_date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          Order_Line_ID = ORDER_LINE_ID,",
						"          Order_ID = ORDER_ID,",
						"          CUSTOMER_DIM_KEY,",
						"          Payment_Ref_Key = PAYMENT_DIM_KEY,",
						"          channel_ref_key = CHANNEL_DIM_KEY,",
						"          Delivery_Type_Ref_key = DELIVERY_DIM_KEY,",
						"          Topping_Dim_Key = product_topping_dim,",
						"          Location_Dim_Key = location_dim_key,",
						"          product_dim_kEY = product_dim_key,",
						"          PROMOTION_DIM_KEY = promotion_dim_key,",
						"          Date_Key = date_key,",
						"          Order_Date = order_date,",
						"          Order_Status = order_status,",
						"          Quantity = quantity,",
						"          Unit_price = unit_price,",
						"          Topping_Price = topping_price,",
						"          Promotion_Amount = promotion_amount,",
						"          DM_create_date = dm_create_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_stg_order_line')]",
				"[concat(variables('factoryId'), '/datasets/ds_order_line')]",
				"[concat(variables('factoryId'), '/datasets/customer_dim')]",
				"[concat(variables('factoryId'), '/datasets/location_dim')]",
				"[concat(variables('factoryId'), '/datasets/product_dim')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PRODUCT_TOPPINGS_DIM')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_PROMOTION_SCD3')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablePAYMENT_REF')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTablechannelref')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTableDELIVERY_TYPE_REF')]",
				"[concat(variables('factoryId'), '/datasets/ds_date')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_SALES_FACT')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_lookup')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "dept_table",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_data",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          DEPARTMENT_ID as string,",
						"          DEPARTMENT_NAME as string,",
						"          MANAGER_ID as string,",
						"          LOCATION_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2",
						"source1, filter1 lookup(source1@DEPARTMENT_ID == source2@DEPARTMENT_ID,",
						"     multiple: false,",
						"     pickup: 'first',",
						"     asc(source2@DEPARTMENT_ID, true),",
						"     broadcast: 'auto')~> lookup1",
						"source2 filter(DEPARTMENT_ID=='90') ~> filter1",
						"lookup1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['lookup.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/dept_table')]",
				"[concat(variables('factoryId'), '/datasets/tgt_data')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_member_loyality_fact')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_member_loyality",
								"type": "DatasetReference"
							},
							"name": "memberloyality"
						},
						{
							"dataset": {
								"referenceName": "customer_dim",
								"type": "DatasetReference"
							},
							"name": "customer"
						},
						{
							"dataset": {
								"referenceName": "ds_store_location",
								"type": "DatasetReference"
							},
							"name": "storelocation"
						},
						{
							"dataset": {
								"referenceName": "ds_date",
								"type": "DatasetReference"
							},
							"name": "date"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSqlTable_fact_member_loyality_program",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join3"
						}
					],
					"scriptLines": [
						"source(output(",
						"          MEMBER_ID as short,",
						"          ORDER_DATE as string,",
						"          INITIAL_POINTS_RECEIVED_DATE as string,",
						"          INITIAL_REWARD_POINTS as short,",
						"          LAST_EARNED_POINTS as short,",
						"          TOTAL_POINTS_EARNED as short,",
						"          REMAINING_POINTS as short,",
						"          IS_ACTIVE as boolean,",
						"          STORE_LOCATION_ID as short,",
						"          ORDER_ID as integer,",
						"          CUSTOMER_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> memberloyality",
						"source(output(",
						"          CUSTOMER_ID as short,",
						"          CUSTOMER_FIRST_NAME as string,",
						"          CUSTOMER_LAST_NAME as string,",
						"          IS_LOYAL as boolean,",
						"          PRIMARY_EMAIL as string,",
						"          SECONDARY_EMAIL as string,",
						"          PRIMARY_PHONE_NUMBER as string,",
						"          SECONDARY_PHONE_NUMBER as string,",
						"          R_Address_Lane1 as string,",
						"          R_Address_Lane_2 as string,",
						"          R_City_Name as string,",
						"          R_State_Name as string,",
						"          R_Country_Name as string,",
						"          R_Zip_Code as integer,",
						"          R_Gate_Code as integer,",
						"          O_ADDRESS_LANE1 as string,",
						"          O_ADDRESS_LANE2 as string,",
						"          O_CITY_NAME as string,",
						"          O_STATE_NAME as string,",
						"          O_COUNTRY_NAME as string,",
						"          O_ZIP_CODE as integer,",
						"          O_GATE_CODE as short,",
						"          JOINING_DATE as string,",
						"          CUSTOMER_DIM_KEY as long,",
						"          STG_CREATE_DATE as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> customer",
						"source(output(",
						"          STORE_LOCATION_ID as short,",
						"          STORE_NAME as string,",
						"          STORE_ADDRESS as string,",
						"          STORE_PHONE_NUMBER as string,",
						"          STORE_OPEN_TIME as string,",
						"          STORE_CLOSE_TIME as string,",
						"          STATE_COUNTRY_ID as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> storelocation",
						"source(output(",
						"          DATE_KEY as short,",
						"          DAY_YYYY_MM_DD as string,",
						"          DAY_US_MM_DD_YYYY as string,",
						"          DAY_US_LONG as string,",
						"          DAY_US_M_D_YY as string,",
						"          WEEK_SHORT as string,",
						"          WEEK_NUMBER as short,",
						"          WEEK_LONG as string,",
						"          MONTH_IN_QUARTER_NUMBER as string,",
						"          MONTH_IN_YEAR_SHORT as string,",
						"          MONTH_IN_YEAR_LONG as string,",
						"          WEEK_WK_QTR_YEAR as string,",
						"          WEEK_FROM_TO as string,",
						"          WEEK_STARTING as string,",
						"          WEEK_WK_YEAR_CONT as string,",
						"          WEEK_WK_YEAR as string,",
						"          WEEK_WK_QTR_YEAR_CONT as string,",
						"          DAY_IN_WEEK_SHORT as string,",
						"          DAY_IN_WEEK_NUMBER as short,",
						"          DAY_IN_WEEK_LONG as string,",
						"          MONTH_SHORT as string,",
						"          MONTH_NUMBER as string,",
						"          MONTH_LONG as string,",
						"          QUARTER_SHORT_US as string,",
						"          YEAR as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> date",
						"customer, memberloyality join(customer@CUSTOMER_ID == memberloyality@CUSTOMER_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, storelocation join(memberloyality@STORE_LOCATION_ID == storelocation@STORE_LOCATION_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join3 select(mapColumn(",
						"          ORDER_ID,",
						"          MEMBER_ID,",
						"          CUSTOMER_DIM_KEY,",
						"          STORE_LOCATION_ID = storelocation@STORE_LOCATION_ID,",
						"          TOTAL_POINTS_EARNED,",
						"          REMAINING_POINTS,",
						"          IS_ACTIVE,",
						"          date_key = DATE_KEY",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(dm_create_date = currentDate()) ~> derivedColumn1",
						"join2, date join(ORDER_DATE == DAY_US_MM_DD_YYYY,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join3",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          member_loyality_program_key as integer,",
						"          order_id as integer,",
						"          Member_id as integer,",
						"          CUSTOMER_DIM_KEY as integer,",
						"          Location_Dim_Key as integer,",
						"          Date_Key as integer,",
						"          Total_Points_Earned as integer,",
						"          Remaining_points as integer,",
						"          Is_Active as string,",
						"          DM_create_date as date",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          order_id = ORDER_ID,",
						"          Member_id = MEMBER_ID,",
						"          CUSTOMER_DIM_KEY,",
						"          Location_Dim_Key = STORE_LOCATION_ID,",
						"          Date_Key = date_key,",
						"          Total_Points_Earned = TOTAL_POINTS_EARNED,",
						"          Remaining_points = REMAINING_POINTS,",
						"          Is_Active = IS_ACTIVE,",
						"          DM_create_date = dm_create_date",
						"     )) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_member_loyality')]",
				"[concat(variables('factoryId'), '/datasets/customer_dim')]",
				"[concat(variables('factoryId'), '/datasets/ds_store_location')]",
				"[concat(variables('factoryId'), '/datasets/ds_date')]",
				"[concat(variables('factoryId'), '/datasets/AzureSqlTable_fact_member_loyality_program')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_emp",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "pivot1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 pivot(groupBy(DEPARTMENT_ID),",
						"     pivotBy(JOB_ID),",
						"     job_id = count(JOB_ID),",
						"     columnNaming: '$N$V',",
						"     lateral: true) ~> pivot1",
						"pivot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string",
						"     ),",
						"     partitionFileNames:['pivot.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/tgt_emp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_product_stg')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "PROJECT_DATAFLOW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ds_product",
								"type": "DatasetReference"
							},
							"name": "stgproduct"
						},
						{
							"dataset": {
								"referenceName": "product_category",
								"type": "DatasetReference"
							},
							"name": "category"
						},
						{
							"dataset": {
								"referenceName": "prod_sub_catg",
								"type": "DatasetReference"
							},
							"name": "subcat"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "product_dim",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "join2"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          PRODUCT_ID as string,",
						"          PRODUCT_NAME as string,",
						"          PRODUCT_PRICE as string,",
						"          PRODUCT_DESCRIPTION as string,",
						"          CALORIES as string,",
						"          IS_ACTIVE as string,",
						"          PRODUCT_SUBCATEGORY_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> stgproduct",
						"source(output(",
						"          PRODUCT_CATEGORY_ID as string,",
						"          PRODUCT_CATEGORY_NAME as string,",
						"          PRODUCT_CATEGORY_DESCRIPTION as string,",
						"          IS_ACTIVE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> category",
						"source(output(",
						"          PRODUCT_SUBCATEGORY_ID as string,",
						"          PRODUCT_SUBCATEGORY_NAME as string,",
						"          PRODUCT_SIZE as string,",
						"          PRODUCT_CATEGORY_ID as string,",
						"          IS_ACTIVE as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> subcat",
						"stgproduct, subcat join(stgproduct@PRODUCT_SUBCATEGORY_ID == subcat@PRODUCT_SUBCATEGORY_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1, category join(subcat@PRODUCT_CATEGORY_ID == category@PRODUCT_CATEGORY_ID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 select(mapColumn(",
						"          PRODUCT_ID,",
						"          PRODUCT_NAME,",
						"          PRODUCT_PRICE,",
						"          PRODUCT_DESCRIPTION,",
						"          IS_ACTIVE = stgproduct@IS_ACTIVE,",
						"          PRODUCT_SUBCATEGORY_ID = stgproduct@PRODUCT_SUBCATEGORY_ID,",
						"          PRODUCT_SUBCATEGORY_NAME,",
						"          PRODUCT_SIZE,",
						"          PRODUCT_CATEGORY_ID = category@PRODUCT_CATEGORY_ID,",
						"          PRODUCT_CATEGORY_NAME",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 keyGenerate(output(product_dim_key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"surrogateKey1 derive(stg_create_date = currentDate(),",
						"          PRODUCT_PRICE = replace(PRODUCT_PRICE, '$', '')) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ds_product')]",
				"[concat(variables('factoryId'), '/datasets/product_category')]",
				"[concat(variables('factoryId'), '/datasets/prod_sub_catg')]",
				"[concat(variables('factoryId'), '/datasets/product_dim')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_window_functions')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference"
							},
							"name": "source1",
							"description": "select employee_id,department_id,salary,\nlead(salary) over ( order by salary ),\nlag(salary) over ( order by salary ) \nFROM employees"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "tgt_emp",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "window1",
							"description": "Aggregates data based on a window and joins with original data.\nselect employee_id,department_id,salary,\nlead(salary) over ( order by salary ),\nlag(salary) over ( order by salary ) \nFROM employees\n"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string,",
						"          HIRE_DATE as string,",
						"          JOB_ID as string,",
						"          SALARY as string,",
						"          COMMISSION_PCT as string,",
						"          MANAGER_ID as string,",
						"          DEPARTMENT_ID as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 window(asc(SALARY, true),",
						"     Next_Salary = lead(SALARY),",
						"          Last_Salary = lag(SALARY)) ~> window1",
						"window1 select(mapColumn(",
						"          EMPLOYEE_ID,",
						"          FIRST_NAME,",
						"          LAST_NAME,",
						"          SALARY,",
						"          DEPARTMENT_ID,",
						"          Next_Salary,",
						"          Last_Salary",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          EMPLOYEE_ID as string,",
						"          FIRST_NAME as string,",
						"          LAST_NAME as string,",
						"          EMAIL as string,",
						"          PHONE_NUMBER as string",
						"     ),",
						"     partitionFileNames:['window_function.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DelimitedText1')]",
				"[concat(variables('factoryId'), '/datasets/tgt_emp')]"
			]
		}
	]
}