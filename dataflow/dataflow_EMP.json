{
	"name": "dataflow_EMP",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "tgt_data",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "cast1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "sort1"
				},
				{
					"name": "rank1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EMPLOYEE_ID as string,",
				"          FIRST_NAME as string,",
				"          LAST_NAME as string,",
				"          EMAIL as string,",
				"          PHONE_NUMBER as string,",
				"          HIRE_DATE as string,",
				"          JOB_ID as string,",
				"          SALARY as string,",
				"          COMMISSION_PCT as string,",
				"          MANAGER_ID as string,",
				"          DEPARTMENT_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 cast(output(",
				"          EMPLOYEE_ID as integer '000',",
				"          SALARY as integer,",
				"          DEPARTMENT_ID as integer '000'",
				"     ),",
				"     errors: true) ~> cast1",
				"cast1 aggregate(groupBy(DEPARTMENT_ID),",
				"     sum_SALARY = sum(SALARY),",
				"          avg_salary = avg(SALARY)) ~> aggregate1",
				"sort1 keyGenerate(output(sq_emp_id as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"aggregate1 sort(asc(DEPARTMENT_ID, true)) ~> sort1",
				"surrogateKey1 rank(asc(DEPARTMENT_ID, true),",
				"     output(rank_col as long)) ~> rank1",
				"rank1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['dataflow_emp.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}